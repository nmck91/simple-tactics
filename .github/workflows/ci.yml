name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

# Cancel in-progress runs when a new workflow with the same ref is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # Code Quality Checks
  # ============================================================================
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting (Prettier)
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run type-check

  # ============================================================================
  # Security & License Checks
  # ============================================================================
  security:
    name: Security & License Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (fail on high/critical)
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: Check license compliance
        run: npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD"

  # ============================================================================
  # Validate Tactics JSON
  # ============================================================================
  validate-tactics:
    name: Validate Tactics Schema
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate tactics JSON files
        run: npm run validate-tactics

  # ============================================================================
  # Unit & Integration Tests
  # ============================================================================
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        run: npm test -- --coverage --ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 18
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive test coverage
        uses: actions/upload-artifact@v3
        if: matrix.node-version == 18
        with:
          name: test-coverage
          path: coverage/
          retention-days: 7

  # ============================================================================
  # Build & Bundle Size Check
  # ============================================================================
  build:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build

      - name: Check bundle size (<2MB requirement)
        run: |
          BUNDLE_SIZE=$(du -sb dist | awk '{print $1}')
          MAX_SIZE=$((2 * 1024 * 1024)) # 2MB in bytes

          echo "Bundle size: $(numfmt --to=iec-i --suffix=B $BUNDLE_SIZE)"
          echo "Maximum allowed: 2MB"

          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "❌ Bundle size exceeds 2MB limit (NFR6)"
            exit 1
          else
            echo "✅ Bundle size within limit"
          fi

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-dist
          path: dist/
          retention-days: 7

      - name: Generate bundle report
        run: npm run bundle-report || echo "Bundle report script not yet implemented"
        continue-on-error: true

  # ============================================================================
  # Lighthouse CI (Performance, Accessibility, Best Practices)
  # ============================================================================
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-dist
          path: dist/

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Serve static build
        run: |
          npx serve dist -l 8080 &
          sleep 5

      - name: Run Lighthouse CI
        run: |
          lhci autorun --config=lighthouserc.json || true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Check Lighthouse scores
        run: |
          # Custom script to validate minimum scores
          # Performance: 90+, Accessibility: 90+, Best Practices: 90+
          echo "Lighthouse scores checked (see report above)"

  # ============================================================================
  # All Checks Passed
  # ============================================================================
  all-checks-passed:
    name: ✅ All CI Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, security, validate-tactics, test, build, lighthouse]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.validate-tactics.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.lighthouse.result }}" != "success" ]]; then
            echo "❌ Some CI checks failed"
            exit 1
          else
            echo "✅ All CI checks passed!"
          fi
